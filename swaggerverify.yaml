openapi: 3.0.3
info:
  title: Patrol Management Application
  version: '1'
  description: >-
    Patrol Management Application  allow a user to create checkpoint and assign them to a Patrol route, members of staff can be assigned to the Patrol route.  The Patrol route can be scheduled for a specific time and how long the patrol should take can be set for the route.

    A user who has been assigned to the route can see the route plotted on a map, the system will show where the checkpoints are for the route
    
    The user will need to carry out a risk assessment before they start the patrol
    
    A user will be able to check-in to the checkpoints as they carry out the patrol, the system will record the time they checked in
    
    The user will be able to record any incidents they find as they carry out the patrol
    
    There will be a set of reports the user can view based on the patrols that have been carried out.
  contact:
    email: gift.felix@zinc.systems
  license:
    name: Patrol Management API 1.0
    url: >-
      https://docs.google.com/document/d/1gWhnxz6eujdJUMlsHQoTdAXEBYS93VQluJaYdcj3ruE/edit
servers:
  -
    url: 'https://api.synapse.staging.zinc.systems/V1'
    description: 'Staging Server'
  -
    url: 'https://api.synapse.zinc.systems/V1'
    description: 'Production Server'
    
externalDocs:
  description: Find out more about Patrol Management APIs
  url: >-
    https://zinc-digital.atlassian.net/wiki/spaces/SPR/pages/2386526212/Patrol+Management+Requirements

tags:
  - name: Checkpoint Service
    description: Exposes endpoints related to checkpoint service
  - name: Route Service
    description: Exposes endpoints related to route service
  - name: Patrol Service
    description: Exposes endpoints related to patrol service

security:
  - AWSAuthtoken: []
    AWSApiKey: []

paths:


  /checkpoints:
    post:
      tags:
        - Checkpoint Service
      summary: Add a new checkpoint
      description: Add a new checkpoint
      requestBody:
        $ref: '#/components/requestBodies/CheckpointRequest'
      responses:
        201:
          $ref: '#/components/responses/CheckpointResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
    
  /checkpoints/verification-type:
    get:
      tags:
        - Checkpoint Service
      summary: Retrieve verification type entries
      description: 
        Retrieve the verification type entries which have been created
      responses:
        200:
          $ref: '#/components/responses/VerificationResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
  /checkpoints/{checkpointId}:
    parameters:
      - $ref: '#/components/parameters/CheckpointId'
    put:
      tags:
        - Checkpoint Service
      summary: Update an existing checkpoint
      description: Update an existing checkpoint
      requestBody:
        $ref: '#/components/requestBodies/CheckpointRequest'
      responses:
        200:
          $ref: '#/components/responses/CheckpointResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    get:
      tags:
        - Checkpoint Service
      summary: Retrieve checkpoint entry
      description: Retrieve a single checkpoint
      responses:
        200:
          $ref: '#/components/responses/CheckpointResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
  /checkpoints/{checkpointId}/status/{checkpointStatusType}:        
    put:
      tags:
        - Checkpoint Service
      parameters:
      - $ref: '#/components/parameters/CheckpointId'
      - $ref: '#/components/parameters/CheckpointStatusType'
      summary: Enable/Disable checkpoint
      description:  Enable/Disable a checkpoint
      responses:
        200:
          $ref: '#/components/responses/CheckpointResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
  /checkpoints/{checkpointId}/checkin:
    post:
      tags:
        - Checkpoint Service
      summary: Make a Check In While Patroling On A Checkpoint
      description: This Api makes a checkin entry in the database.
      parameters:
        - $ref: '#/components/parameters/CheckpointId'
      requestBody:
        $ref: '#/components/requestBodies/CheckinRequest'
      responses:
        201:
          $ref: '#/components/responses/CheckInResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
  /checkpoints/checkin/{patrolId}:
    parameters:
      - $ref: '#/components/parameters/PatrolId'
    get:
      tags:
        - Checkpoint Service
      summary: Get Checkins Based On PatrolId
      description: This Api Fetches The List Of Checkins For A Patrol.
      responses:
        200:
          $ref: '#/components/responses/CheckInListResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'             
                  
          
  /checkpoints/site/{siteId}:
    get:
      tags:
        - Checkpoint Service
      summary: Retrieve checkpoint entries related to site
      description: Retrieve checkpoint entries related to site
      parameters:
      - $ref: '#/components/parameters/SiteId'
      responses:
        200:
          $ref: '#/components/responses/CheckpointListResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
                  
  /checkpoints/route/{routeId}:
    get:
      tags:
        - Checkpoint Service
      summary: Retrieve a set of Checkpoint entries range
      description: 
        Retrieve the  set of Checkpoint entries
      parameters:
      - $ref: '#/components/parameters/RouteId'
      responses:
        200:
          $ref: '#/components/responses/CheckpointListResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'    
                  
          
          
  /routes:
    
    post:
      tags:
        - Route Service
      summary: Add a new route
      description: Add a new route
      requestBody:
        $ref: '#/components/requestBodies/RoutePostPutRequest'
      responses:
        201:
          $ref: '#/components/responses/RoutePostPutResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    
  /routes/{routeId}:
    parameters:
      - $ref: '#/components/parameters/RouteId'
    put:
      tags:
        - Route Service
      summary: Update an existing route
      description: Update an existing route
      requestBody:
        $ref: '#/components/requestBodies/RoutePostPutRequest'
      responses:
        200:
          $ref: '#/components/responses/RoutePostPutResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    get:
      tags:
        - Route Service
      summary: Retrieve route entry
      description: Retrieve a single route
      responses:
        200:
          $ref: '#/components/responses/RouteCheckpointResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    
  /routes/{routeId}/status/{routeStatusType}:        
    put:
      tags:
        - Route Service
      parameters:
      - $ref: '#/components/parameters/RouteId'
      - $ref: '#/components/parameters/RouteStatusType'
      summary: Enable/Disable route
      description:  Enable/Disable a route
      responses:
        200:
          $ref: '#/components/responses/RouteResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
  /routes/checkpoint/{checkpointId}:
    get:
      tags:
        - Route Service
      summary: Retrieve route entries related to checkpoint
      description: Retrieve route entries related to checkpoint
      parameters:
      - $ref: '#/components/parameters/CheckpointId'
      responses:
        200:
          $ref: '#/components/responses/RouteListResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
  /routes/site/{siteId}:
    get:
      tags:
        - Route Service
      summary: Retrieve route entries related to site
      description: Retrieve route entries related to site
      parameters:
      - $ref: '#/components/parameters/SiteId'
      responses:
        200:
          $ref: '#/components/responses/RouteListResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
            
       
  /schedule-patrols:
    
    post:
      tags:
        - Patrol Service
      summary: Add a new patrol schedule
      description: Add a new patrol schedule
      requestBody:
        $ref: '#/components/requestBodies/PatrolRequest'
      responses:
        201:
          $ref: '#/components/responses/PatrolResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    
  /schedule-patrols/{patrolId}:
    parameters:
      - $ref: '#/components/parameters/PatrolId'
    put:
      tags:
        - Patrol Service
      summary: Update an existing patrol
      description: Update an existing patrol by Id
      requestBody:
        $ref: '#/components/requestBodies/PatrolRequest'
      responses:
        200:
          $ref: '#/components/responses/PatrolResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
    get:
      tags:
        - Patrol Service
      summary: Retrieve patrol entry
      description: Retrieve a single patrol
      responses:
        200:
          $ref: '#/components/responses/PatrolResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
  /schedule-patrols/user/{userId}:
    get:
      tags:
        - Patrol Service
      summary:  Retrieve Assigned Patrols
      description: 
        Retrieve the Assinged Patrol entries
      parameters:
      - $ref: '#/components/parameters/UserId'
      responses:
        200:
          $ref: '#/components/responses/PatrolListResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
  
  /schedule-patrols/route/{routeId}:
    get:
      tags:
        - Patrol Service
      summary: Retrieve patrol entries related to route
      description: Retrieve patrol entries related to route
      parameters:
      - $ref: '#/components/parameters/RouteId'
      responses:
        200:
          $ref: '#/components/responses/PatrolListResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'

          
  /schedule-patrols/{patrolId}/start:
    put:
      tags:
        - Patrol Service
      summary: Start patrol
      description: Start patrol
      parameters:
      - $ref: '#/components/parameters/PatrolId'
      responses:
        200:
          $ref: '#/components/responses/BooleanResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
  /schedule-patrols/{patrolId}/abandon:
    put:
      tags:
        - Patrol Service
      summary: Abandon patrol
      description: Abandon patrol
      parameters:
      - $ref: '#/components/parameters/PatrolId'
      responses:
        200:
          $ref: '#/components/responses/BooleanResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
  /schedule-patrols/{patrolId}/complete:
    put:
      tags:
        - Patrol Service
      summary: Complete patrol
      description: Complete patrol
      parameters:
      - $ref: '#/components/parameters/PatrolId'
      responses:
        200:
          $ref: '#/components/responses/BooleanResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'
          
  
  /schedule-patrols/{patrolId}/risk-assessment/{riskAssessmentId}:
    put:
      tags:
        - Patrol Service
      summary: Update risk assessment id in patrol
      description:  Update risk assessment id in patrol
      parameters:
      - $ref: '#/components/parameters/PatrolId'
      - $ref: '#/components/parameters/RiskAssessmentId'
      responses:
        200:
          $ref: '#/components/responses/PatrolResponse'
        400:
          $ref: '#/components/responses/ErrorResponse'
        401:
          $ref: '#/components/responses/ErrorResponse'
        403:
          $ref: '#/components/responses/ErrorResponse'
        500:
          $ref: '#/components/responses/ErrorResponse'

components:
  securitySchemes:
    AWSAuthtoken:
      type: apiKey
      description: 'AWS Cognito format IdToken. Required for all calls to Patrol services'
      name: Authorization
      in: header
    AWSApiKey:
      name: x-api-key
      in: header
      type: apiKey
      description: 'AWS API Gateway format ApiKey. Required for all calls to Patrol services'
  parameters:
    # ContextId:
    #   name: x-context-id
    #   in: header
    #   description: 'Optional context id for tracing'
    #   required: false
    #   schema:
    #     type: string
    UserId:
      name: userId
      in: path
      description: User id
      required: true
      schema:
        $ref: '#/components/schemas/Guid'
    PatrolId:
      name: patrolId
      in: path
      description: Patrol id
      required: true
      schema:
        $ref: '#/components/schemas/Guid'
    CheckpointStatusType:
      name: checkpointStatusType
      in: path
      description: Status
      required: true
      schema:
        $ref: '#/components/schemas/CheckpointStatus'
    RouteStatusType:
      name: routeStatusType
      in: path
      description: Status
      required: true
      schema:
        $ref: '#/components/schemas/RouteStatus'
       
    RouteId:
      name: routeId
      in: path
      description: Route id
      required: true
      schema:
        $ref: '#/components/schemas/Guid'
    CheckpointId:
      name: checkpointId
      in: path
      description: Checkpoint id
      required: true
      schema:
        $ref: '#/components/schemas/Guid'
    SiteId:
      name: siteId
      in: path
      description: Site id
      required: true
      schema:
        $ref: '#/components/schemas/Guid'
    RiskAssessmentId:
      name: riskAssessmentId
      in: path
      description: Risk Assessment id
      required: true
      schema:
        $ref: '#/components/schemas/Guid'
    FromDate:
      name: fromDate
      in: query
      description: The beginning of the date range (UTC), formatted as "YYYY-MM-DDTHH:MM:SS" (e.g. "1969-07-21T02:56:15")
      required: true
      schema:
        type: string
        format: date-time
    ToDate:
      name: toDate
      in: query
      description: The end of the date range (UTC), formatted as "YYYY-MM-DDTHH:MM:SS" (e.g. "1969-07-21T02:56:15")
      required: false
      schema:
        type: string
        format: date-time
    PageToken:
      name: pageToken
      in: query
      description: Token used to retrieve additional matches
      required: false
      schema:
        type: string
  schemas:
    Guid:
      title: A GUID Identifier
      description: A Guid identifier
      type: string
      pattern: '^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$'
    DateTime:
      title: A Date & Time
      description: Datetime range (UTC), formatted as "YYYY-MM-DDTHH:MM:SS" (e.g. "1969-07-21T02:56:15")
      type: string
      format: date-time
    BooleanStatus:
      title: Entry Creation
      type: object
      properties:
        flag:
          type: boolean
    Numeric:
      title: Entry Numeric Data
      type: number
      format: float
      pattern: '\-?\d+\.\d+'
      
    Time:
      title: Entry Time Data (time in seconds)
      type: integer
      format: int64
      pattern: '^[0-9]*$' 
      
    CheckpointStatus:
      type: string
      description: Checkpoint Status
      readOnly: true
      example: 'ENABLED'
      enum:
        - ENABLED
        - DISABLED
    RouteStatus:
      type: string
      description: Route Status
      readOnly: true
      example: 'ENABLED'
      enum:
        - ENABLED
        - DISABLED 
        
    Error:
      title: Error Response
      type: object
      properties:
        msg:
          type: string
          
    
    # Checkpoint Data      
    VerificationTypeEntryData:
      title: Verification Type Entry
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Route Id
          readOnly: true
        name:
          type: string
        title:
          type: string
    
    CheckpointList:
      title: Set of Checkpoint Definition
      type: object
      properties:
        struct:
          $ref: '#/components/schemas/CheckpointEntryStruct'
        data:
          $ref: '#/components/schemas/CheckpointEntriesData'
          
    Checkpoint:
      title: Checkpoint Definition
      type: object
      properties:
        struct:
          $ref: '#/components/schemas/CheckpointEntryStruct'
        data:
          $ref: '#/components/schemas/CheckpointEntryData'
          
    CheckInEntryStruct:
      title: Struct Definition for CheckIn
      type: object
      properties:
        c:
          type: string
        v:
          type: string
          pattern: '^V\d$'
      example: '{"c":"CheckIn","v":"V1"}'  

    CheckInList:
      title: Set of Checkin Definition
      type: object
      properties:
        struct:
          $ref: '#/components/schemas/CheckInEntryStruct'
        data:
          $ref: '#/components/schemas/CheckInEntriesData'    

    CheckInEntriesData:
      title: Set of Checkin Entries
      type: array
      items:
        $ref: '#/components/schemas/CheckInData'
      minItems: 0

    CheckIn:
      title: CheckIn Definition
      type: object
      properties:
        struct:
          $ref: '#/components/schemas/CheckInEntryStruct'
        data:
          $ref: '#/components/schemas/CheckInData'    
          
    
    
    Verification:
      title: Verification Definition
      type: object
      properties:
        struct:
          $ref: '#/components/schemas/CheckpointVerificationEntryStruct'
        data:
          type: array
          items:
            $ref: '#/components/schemas/VerificationTypeEntryData'
    
    CheckpointVerificationEntryStruct:
      title: Struct Definition for Checkpoint
      type: object
      properties:
        c:
          type: string
        v:
          type: string
          pattern: '^V\d$'
      example: '{"c":"CheckpointVerification","v":"V1"}'  
      
    CheckpointEntryStruct:
      title: Struct Definition for Checkpoint
      type: object
      properties:
        c:
          type: string
        v:
          type: string
          pattern: '^V\d$'
      example: '{"c":"Checkpoint","v":"V1"}'  
      
    CheckpointEntriesData:
      title: Set of checkpoint Entries
      type: array
      items:
        $ref: '#/components/schemas/CheckpointEntryData'
      minItems: 0
      
    LocationData:
      title: Location Entry
      type: object
      required:
        - name
        - orgId
      properties:
        lat:
          allOf:
            - $ref: '#/components/schemas/Numeric'
        long:
          allOf:
            - $ref: '#/components/schemas/Numeric'
          
    CheckpointEntryData:
      title: Checkpoint Entry
      type: object
      required:
        - name
        - siteId
        - verificationTypeId
      properties:
        id:
          # Returned by GET, not used in POST/PUT/PATCH
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Checkpoint Id
          readOnly: true
        siteId:
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Site Id  
        verificationTypeId:
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Verification Type Id
        name:
          type: string
          format: string
          example: 'Checkpiont 1'
        location:
          $ref: '#/components/schemas/LocationData'
        referenceImages:
          type: array
          items:
            type: string
        ImageMetaData: 
          type: string
        plotLocation:
          type: boolean
        toleranceInMeter:
          type: number
          format: float
          description: actually tolerance value
          example: 40
        status:
          $ref: '#/components/schemas/CheckpointStatus'
        description:
          type: string
        note:
          type: string
        createdDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
            - title: Create date of entry. Default to now() if not supplied
          readOnly: true
        modifiedDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
            - title: Last modify date of entry. Default to now() if not supplied
          readOnly: true
        createdBy:
          allOf:
            - $ref: '#/components/schemas/Guid'
            - title: User Id creating entry. Default to current use if not supplied
          readOnly: true
        modifiedBy:
          allOf:
            - $ref: '#/components/schemas/Guid'
            - title: User Id that last modified the entry. Default to current use if not supplied
          readOnly: true
   
    CheckInData:
      title: CheckIn Payload
      type: object
      required:
        - siteId
        - routeId
        - patrolId
        - checkpointId
        - patrolUserId
        - locationData
        - isSkipped
        - checkInTime
       
      properties:
        id:
          # Returned by GET, not used in POST/PUT/PATCH
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Checkpoint Id
          readOnly: true
        siteId:
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Site Id  
        routeId:
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Route Id
        checkInTime:
          title: Checkin time (unix epoch timestamp)
          type: integer
        patrolId:
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Patrol Id  
        checkpointId:
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: CheckPoint Id 
        patrolUserId:
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: User Id Of the Patroling Person     
        location:
          $ref: '#/components/schemas/LocationData'
        
        description:
          type: string

        isSkipped:
          type: boolean
          default: false
        checkinTime:
          allOf:
            - $ref: '#/components/schemas/DateTime'
            - title: Create date of entry. Default to now() if not supplied
         
        createdDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
            - title: Create date of entry. Default to now() if not supplied
          readOnly: true
        modifiedDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
            - title: Last modify date of entry. Default to now() if not supplied
          readOnly: true
        createdBy:
          allOf:
            - $ref: '#/components/schemas/Guid'
            - title: User Id creating record. Default to current use if not supplied
          readOnly: true
        modifiedBy:
          allOf:
            - $ref: '#/components/schemas/Guid'
            - title: User Id that last modified the record. Default to current use if not supplied
          readOnly: true      
             
    
    # Route Data
    RouteList:
      title: Set of Route Definition
      type: object
      properties:
        struct:
          $ref: '#/components/schemas/RouteEntryStruct'
        data:
          $ref: '#/components/schemas/RouteEntriesData'
          
    Route:
      title: Route Definition
      type: object
      properties:
        struct:
          $ref: '#/components/schemas/RouteEntryStruct'
        data:
          $ref: '#/components/schemas/RouteEntryData'
          
    RouteCheckpoint:
      title: Route Checkpoints Entries Definition(GetRouteById)
      type: object
      properties:
        struct:
          $ref: '#/components/schemas/RouteEntryStruct'
        data:
          $ref: '#/components/schemas/RouteCheckpointEntryData'
          
    RoutePostPut:
      title: Route Checkpoint Ids Definition(Post and Put)
      type: object
      properties:
        struct:
          $ref: '#/components/schemas/RouteEntryStruct'
        data:
          $ref: '#/components/schemas/RoutePostPutData'
       
    RouteEntryStruct:
      title: Struct Definition for Route
      type: object
      properties:
        c:
          type: string
        v:
          type: string
          pattern: '^V\d$'
      example: '{"c":"Route","v":"V1"}'  
    
    
    RouteEntriesData:
      title: Set of Route Entries
      type: array
      items:
        $ref: '#/components/schemas/RouteEntryData'
      minItems: 0
    
    RouteCheckpointEntryData:
      title: Route Entry along with Checkpoints Entries
      type: object 
      required:
        - name
        - orgId
        - siteId
      properties:
        route:
          # Returned by GET, not used in POST/PUT/PATCH 
          allOf:
            - $ref: '#/components/schemas/RouteEntryData'
          title: Route 
        checkpoints:
          items:
              $ref: '#/components/schemas/CheckpointEntryData'
              
    RoutePostPutData:
      title: Route Entry along with Checkpoint Ids
      type: object 
      required:
        - name
        - orgId
        - siteId
      properties:
        route:
          # Returned by GET, not used in POST/PUT/PATCH 
          allOf:
            - $ref: '#/components/schemas/RouteEntryData'
          title: Route 
        checkpoints:
          items:
            $ref: '#/components/schemas/RouteCheckpointData'
    
    RouteCheckpointData:
      title: Route Entry along with set of Checkpoint
      type: object   
      properties:
        checkpointId:
          $ref: '#/components/schemas/Guid'
        siteId:
          $ref: '#/components/schemas/Guid'
        order:
          type: integer
          format: int
        tags:
          type: array
          items:
            type: string
        
        
      
    RouteEntryData:
      title: Route Entry
      type: object 
      required:
        - name
        - orgId
        - siteId
      properties:
        id:
          # Returned by GET, not used in POST/PUT/PATCH
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Route Id
          readOnly: true
        orgId:
          title: Organisation Id
          type: integer
        name:
          type: string
          format: string
          example: 'Route 1'
        timeFrame:
          allOf:
            - $ref: '#/components/schemas/Time'
          title: Time Frame(In Seconds)
        tolerance:
          allOf:
            - $ref: '#/components/schemas/Time'
          title: Tolerance(In Seconds)
        status:
          $ref: '#/components/schemas/RouteStatus'
        description:
          type: string
        note:
          type: string
        createdDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
            - title: Create date of entry. Default to now() if not supplied
          readOnly: true
        modifiedDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
            - title: Last modify date of entry. Default to now() if not supplied
          readOnly: true
        createdBy:
          allOf:
            - $ref: '#/components/schemas/Guid'
            - title: User Id creating entry. Default to current use if not supplied
          readOnly: true
        modifiedBy:
          allOf:
            - $ref: '#/components/schemas/Guid'
            - title: User Id that last modified the entry. Default to current use if not supplied
          readOnly: true
      
    # Patrol Data      
    PatrolList:
      title: Set of Patrol Definition
      type: object
      properties:
        struct:
          $ref: '#/components/schemas/PatrolEntryStruct'
        data:
          $ref: '#/components/schemas/PatrolEntriesData'
          
    Patrol:
      title: Patrol Definition
      type: object
      properties:
        struct:
          $ref: '#/components/schemas/PatrolEntryStruct'
        data:
          $ref: '#/components/schemas/PatrolEntryData'
 
    PatrolEntryStruct:
      title: Struct definition for Patrol
      type: object
      properties:
        c:
          type: string
        v:
          type: string
          pattern: '^V\d$'
      example: '{"c":"Patrol","v":"V1"}'
      
    PatrolEntriesData:
      title: Set of Patrol Entries
      type: array
      items:
        $ref: '#/components/schemas/PatrolEntryData'
      minItems: 0
      
    PatrolEntryData:
      title: Patrol Entry
      type: object
      required:
        - name
        - orgId
        - routeId
      properties:
        id:
          # Returned by GET, not used in POST/PUT/PATCH
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Patrol Id
          readOnly: true
        orgId:
          title: Organisation Id
          type: integer   
        routeId:
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Route Id
        eventId:
          type: string
          description: eventId from google scheduler api
        riskAssessmentId:
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Risk Assessment Id  
        name:
          type: string
          format: string
          example: 'Patrol 1'
        isScheduled:
          type: boolean
          example: true
        scheduleDate:
         allOf:
            - $ref: '#/components/schemas/DateTime'
         title: Schedule Date
        startTime:
          type: integer
          format: int64
          readOnly: true
          description: time in seconds
          example: 3456355
        abandonTime:
          type: integer
          format: int64
          readOnly: true
          description: time in seconds
          example: 3456355
        completionTime:
          type: integer
          format: int64
          readOnly: true
          description: time in seconds
          example: 3456355
        status:
          type: string
          description: Patrol Status
          readOnly: true
          example: 'READY'
          enum:
            - READY
            - STARTED
            - ABANDONED
            - COMPLETED
        isRepeated:
          type: boolean
          example: false
        assignedUserId:
          allOf:
            - $ref: '#/components/schemas/Guid'
          title: Assigned User Id  
        additionalInfo:
          type: string
        interval:
          type: integer
          format: int64
          example: 100000
        type:
          type: string
        day:
          type: integer
          example: 3
        isThereEndDate:
          type: boolean
        endType:
          type: string
        createdDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
            - title: Create date of entry. Default to now() if not supplied
          readOnly: true
        modifiedDate:
          allOf:
            - $ref: '#/components/schemas/DateTime'
            - title: Last modify date of entry. Default to now() if not supplied
          readOnly: true
        createdBy:
          allOf:
            - $ref: '#/components/schemas/Guid'
            - title: User Id creating entry. Default to current use if not supplied
          readOnly: true
        modifiedBy:
          allOf:
            - $ref: '#/components/schemas/Guid'
            - title: User Id that last modified the entry. Default to current use if not supplied
          readOnly: true
       
  responses:
    ErrorResponse:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BooleanResponse:
      description: Entry For created/updated response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BooleanStatus'
            
    VerificationResponse:
      description: Set of verification type entries response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Verification'   
    CheckpointListResponse:
      description: Set of checkpoint entries response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckpointList'
    CheckpointResponse:
      description: Checkpoint entry response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Checkpoint'
            
    CheckInResponse:
      description: CheckIn entry response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckIn'    
    CheckInListResponse:
      description: CheckIn entry response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckInList' 
            
    RouteListResponse:
      description: Set of route entries response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RouteList'
    RouteResponse:
      description: Route entry response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Route'
    RoutePostPutResponse:
      description: Route entry response(Post and Put)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RoutePostPut'
    RouteCheckpointResponse:
      description: Route along with checkpoint entries response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RouteCheckpoint'
    PatrolListResponse:
      description: Set of patrol entries response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PatrolList'
    PatrolResponse:
      description: Patrol entry response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Patrol' 
            
  requestBodies:
    CheckpointRequest:
      description: Checkpoint entry request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Checkpoint'
    CheckinRequest:
      description: CheckIn  request Payload
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CheckIn'
    RoutePostPutRequest:
      description: Route entry request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RoutePostPut'
    PatrolRequest:
      description: Patrol entry request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Patrol'
